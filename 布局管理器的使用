from PyQt5.Qt import *

class Window(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("QBoxLayout的学习")
        self.resize(700, 600)
        self.setup_ui()

    def setup_ui(self):
        label1 = QLabel("标签1")

        label1.setStyleSheet("background-color: cyan;")
        label2 = QLabel("标签2")
        label2.setStyleSheet("background-color: yellow;")
        label3 = QLabel("标签3")
        label3.setStyleSheet("background-color: red;")

        label4 = QLabel("标签4")
        label4.setStyleSheet("background-color: orange;")

        # 1. 创建布局管理器对象
        # layout = QBoxLayout(QBoxLayout.LeftToRight)
        layout = QHBoxLayout()

        # 2. 把布局管理器对象设置给需要布局的父控件
        self.setLayout(layout)


        # 3. 添加需要布局的子控件到布局管理器当中
        layout.addWidget(label1)
        # layout.addSpacing(100) #这是设置控件和控件之间的间距，包括了原来的间距（小的）
        #拉大的话，这个空白的宽永远不变
        layout.addStretch(2)#增加（设置）空白的伸缩因子的比例
        layout.addWidget(label2)
        layout.addStretch(1)
        layout.addWidget(label3)
        # layout.addWidget(label4)

        # layout.setStretchFactor(label2, 1)#把标签2的伸缩因子设置成1，当拉伸框框变化时，
        # 空白部分的填充由伸缩因子决定

        # layout.insertSpacing(3, 60)

        # layout.insertWidget(1, label4)

        label5 = QLabel("标签5")
        label5.setStyleSheet("background-color: pink;")
        label6 = QLabel("标签6")
        label6.setStyleSheet("background-color: blue;")
        label7 = QLabel("标签7")
        label7.setStyleSheet("background-color: cyan;")


        h_layout = QVBoxLayout()
        h_layout.setDirection(QBoxLayout.RightToLeft)
        h_layout.addWidget(label5)
        h_layout.addWidget(label6,2)#1这个参数是伸缩因子，控制伸缩比例
        #如果这里不设置，就默认伸缩因子是0.然后拉伸的时候会同时变化
        #如果设置了伸缩因子，由于其他默认是0，只有一个非零，所以变的时候全由他来填充
        h_layout.addWidget(label7)

        layout.addLayout(h_layout, 2)#第二个参数是伸缩因子

        # layout.insertLayout(2, h_layout)

        label1.hide()
        label1.show()

        # layout.removeWidget(label1)
        # label1.setParent(None)这个方式比上面靠谱，或者隐藏也可以


        # timer = QTimer(self) #定时器
        # def test():
        #     # QBoxLayout.LeftToRight
        #     layout.setDirection((layout.direction() + 1) % 4)。方向分别用0、1、2、3表示，对4求模
        #     让方向不断发生变化
        #     pass
        # timer.timeout.connect(test)
        # timer.start(1000)


if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)

    window = Window()
    window.show()


    sys.exit(app.exec_())
